#!/bin/bash
user=postgres
#	if grep $user /etc/passwd then
#		echo "The user $user Exists"
#	else
#		adduser --quiet $user
#	fi

#sudo snap restart docserver
#su - $user

#docserver.initialize initdb

#/snap/docserver/x1/usr/bin/pg_ctl -D /home/postgres/snap/docserver/common/data -l logfile start

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

. /usr/share/debconf/confmodule

DIR="$SNAP/var/www/onlyoffice/documentserver"
LOG_DIR="$SNAP_DATA/current/var/log/onlyoffice/documentserver"
APP_DIR="$SNAP/var/lib/onlyoffice/documentserver"
CONF_DIR="$SNAP_DATA/etc/onlyoffice/documentserver"
LOCAL_CONFIG=${CONF_DIR}/local.json
EXAMPLE_CONFIG=${CONF_DIR}-example/local.json
JSON_BIN="$DIR/npm/node_modules/.bin/json"
JSON="$JSON_BIN -I -q -f $LOCAL_CONFIG"
JSON_EXAMPLE="$JSON_BIN -I -q -f ${EXAMPLE_CONFIG}"

mkdir -p $SNAP_DATA/etc/onlyoffice/documentserver
touch $SNAP_DATA/etc/onlyoffice/documentserver/local.json

OLD_VERSION="$2"

DB_HOST=""
DB_USER=""
DB_PWD=""
DB_NAME=""

RABBITMQ_HOST=""
RABBITMQ_USER=""
RABBITMQ_PWD=""

REDIS_HOST=""

CLUSTER_MODE=""

create_local_configs(){
	for i in $LOCAL_CONFIG $EXAMPLE_CONFIG; do
		if [ -d $(dirname ${i}) -a ! -f ${i} ]; then
			echo {} > ${i}
		fi
  	done
}

read_saved_params(){
	db_get onlyoffice/db-host || true
	DB_HOST="$RET"
	db_get onlyoffice/db-user || true
	DB_USER="$RET"
	db_get onlyoffice/db-pwd || true
	DB_PWD="$RET"
	db_get onlyoffice/db-name || true
	DB_NAME="$RET"

	db_get onlyoffice/rabbitmq-host || true
	RABBITMQ_HOST="$RET"
	db_get onlyoffice/rabbitmq-user || true
	RABBITMQ_USER="$RET"
	db_get onlyoffice/rabbitmq-pwd || true
	RABBITMQ_PWD="$RET"

	db_get onlyoffice/redis-host || true
	REDIS_HOST="$RET"

	db_get onlyoffice/cluster-mode || true
	CLUSTER_MODE="$RET"

	db_get onlyoffice/jwt-enabled || true
	JWT_ENABLED="$RET"
	db_get onlyoffice/jwt-secret || true
	JWT_SECRET="$RET"
	db_get onlyoffice/jwt-header || true
	JWT_HEADER="$RET"
}
  
install_db(){
        CONNECTION_PARAMS="-h$DB_HOST -U$DB_USER -w"
        if [ -n "$DB_PWD" ]; then
                export PGPASSWORD=$DB_PWD
        fi

        PSQL="docserver.psql -h 127.0.0.1 -d postgres -q $CONNECTION_PARAMS"
        CREATEDB="docserver.createdb $CONNECTION_PARAMS"

	# test postgresql connection
	set +e
        $PSQL -c ";" &>/dev/null
        ERRCODE=$?
        if [ $ERRCODE -ne 0 ]; then
                service postgresql start &>/dev/null
                $PSQL -c ";" &>/dev/null || { echo "ERROR: can't connect to postgressql database"; exit 1; }
        fi
	set -e

        if ! $PSQL -lt | cut -d\| -f 1 | grep -qw $DB_NAME; then
                $CREATEDB $DB_NAME >/dev/null 2>&1
        fi

        if [ ! "$CLUSTER_MODE" = true ]; then
                $PSQL -d "$DB_NAME" -f "$DIR/server/schema/postgresql/removetbl.sql" >/dev/null 2>&1
        fi
        $PSQL -d "$DB_NAME" -f "$DIR/server/schema/postgresql/createdb.sql" >/dev/null 2>&1
}

save_db_params(){
  $JSON -e "if(this.services===undefined)this.services={};"
  $JSON -e "if(this.services.CoAuthoring===undefined)this.services.CoAuthoring={};"
  $JSON -e "if(this.services.CoAuthoring.sql===undefined)this.services.CoAuthoring.sql={};" >/dev/null 2>&1
  $JSON -e "this.services.CoAuthoring.sql.dbHost = '$DB_HOST'"
  $JSON -e "this.services.CoAuthoring.sql.dbName = '$DB_NAME'"
  $JSON -e "this.services.CoAuthoring.sql.dbUser = '$DB_USER'"
  $JSON -e "this.services.CoAuthoring.sql.dbPass = '$DB_PWD'"
}

create_local_configs
read_saved_params
install_db
save_db_params